Index: LMS_APP/src/main/java/com/example/LibraryManagementSystem/ManageBooksFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.LibraryManagementSystem;\r\n\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.MultiFormatWriter;\r\nimport com.google.zxing.WriterException;\r\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\r\nimport com.google.zxing.common.BitMatrix;\r\nimport javax.swing.*;\r\nimport java.awt.image.BufferedImage;\r\n\r\npublic class ManageBooksFunction {\r\n    private ManageBooksUI view;\r\n    private ReadQR qrReader; // Add this line to declare the qrReader variable\r\n\r\n    public ManageBooksFunction(ManageBooksUI view) {\r\n        this.view = view;\r\n    }\r\n\r\n    public void addBook() {\r\n        String title = view.getTitle();\r\n        String author = view.getAuthor();\r\n        String genre = view.getGenre();\r\n        String publisher = view.getPublisher();\r\n        String datePublished = view.getDatePublished();\r\n\r\n        if (title.isEmpty() || author.isEmpty()) {\r\n            view.showError(\"Title and Author are required fields\");\r\n            return;\r\n        }\r\n\r\n        String[] bookData = {title, author, genre, publisher, datePublished};\r\n        view.addBookToTable(bookData);\r\n        view.clearForm();\r\n        view.showMessage(\"Book added successfully!\");\r\n\r\n        // Generate QR code for the newly added book\r\n        generateQRCode();\r\n    }\r\n\r\n    public void updateBook() {\r\n        int selectedRow = view.getSelectedBookRow();\r\n        if (selectedRow == -1) {\r\n            view.showError(\"Please select a book to update\");\r\n            return;\r\n        }\r\n\r\n        String title = view.getTitle();\r\n        String author = view.getAuthor();\r\n        String genre = view.getGenre();\r\n        String publisher = view.getPublisher();\r\n        String datePublished = view.getDatePublished();\r\n\r\n        if (title.isEmpty() || author.isEmpty()) {\r\n            view.showError(\"Title and Author are required fields\");\r\n            return;\r\n        }\r\n\r\n        String[] bookData = {title, author, genre, publisher, datePublished};\r\n        view.updateBookInTable(selectedRow, bookData);\r\n        view.clearForm();\r\n        view.showMessage(\"Book updated successfully!\");\r\n    }\r\n\r\n    public void deleteBook() {\r\n        int selectedRow = view.getSelectedBookRow();\r\n        if (selectedRow == -1) {\r\n            view.showError(\"Please select a book to delete\");\r\n            return;\r\n        }\r\n\r\n        int confirm = JOptionPane.showConfirmDialog(view.getFrame(),\r\n                \"Are you sure you want to delete this book?\",\r\n                \"Confirm Delete\", JOptionPane.YES_NO_OPTION);\r\n\r\n        if (confirm == JOptionPane.YES_OPTION) {\r\n            view.removeBookFromTable(selectedRow);\r\n            view.showMessage(\"Book deleted successfully!\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Open QR code reader to scan and process books\r\n     * This method replaces both the old scanQR and returnBook functions\r\n     */\r\n    public void returnBook() {\r\n        try {\r\n            if (qrReader == null) {\r\n                qrReader = new ReadQR();\r\n                // Set up the QR reader to handle book processing\r\n                setupQRListener();\r\n            }\r\n            \r\n            qrReader.show();\r\n            qrReader.startScanning();\r\n        } catch (Exception e) {\r\n            view.showError(\"Error initializing webcam: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set up the QR reader to handle book processing\r\n     */\r\n    private void setupQRListener() {\r\n        if (qrReader != null) {\r\n            qrReader.integrateWithManageBooks(this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select a book in the table by index\r\n     * This method would be called from the ManageBooksIntegration\r\n     */\r\n    public void selectBookInTable(int rowIndex) {\r\n        if (rowIndex >= 0) {\r\n            view.getBookTable().setRowSelectionInterval(rowIndex, rowIndex);\r\n            view.getBookTable().scrollRectToVisible(\r\n                view.getBookTable().getCellRect(rowIndex, 0, true));\r\n        }\r\n    }\r\n\r\n    public void generateQRCode() {\r\n        int selectedRow = view.getSelectedBookRow();\r\n        if (selectedRow == -1) {\r\n            view.showError(\"Please select a book to generate QR code\");\r\n            return;\r\n        }\r\n\r\n        String[] bookData = view.getBookAtRow(selectedRow);\r\n        String qrContent = formatQRContent(bookData[0], bookData[1], bookData[2], bookData[3], bookData[4]);\r\n\r\n        try {\r\n            BufferedImage qrImage = generateQRCodeImage(qrContent);\r\n            view.displayQRCode(new ImageIcon(qrImage));\r\n        } catch (WriterException e) {\r\n            view.showError(\"Failed to generate QR code: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes a book after its QR code has been scanned\r\n     * @param bookTitle The title of the book being processed\r\n     */\r\n    public void processBookReturn(String bookTitle) {\r\n        // In a real application, you would update a database to mark the book as returned\r\n        // For this example, we'll just show a confirmation message\r\n        SwingUtilities.invokeLater(() -> {\r\n            JOptionPane.showMessageDialog(\r\n                view.getFrame(),\r\n                \"Book \\\"\" + bookTitle + \"\\\" has been successfully returned.\",\r\n                \"Book Return Successful\",\r\n                JOptionPane.INFORMATION_MESSAGE\r\n            );\r\n        });\r\n    }\r\n\r\n    private String formatQRContent(String title, String author, String genre, String publisher, String date) {\r\n        StringBuilder content = new StringBuilder();\r\n        content.append(\"=== Book Information ===\\n\\n\");\r\n        content.append(\"Title: \").append(title).append(\"\\n\");\r\n        content.append(\"Author: \").append(author).append(\"\\n\");\r\n        if (!genre.isEmpty()) content.append(\"Genre: \").append(genre).append(\"\\n\");\r\n        if (!publisher.isEmpty()) content.append(\"Publisher: \").append(publisher).append(\"\\n\");\r\n        if (!date.isEmpty()) content.append(\"Date Published: \").append(date).append(\"\\n\");\r\n        return content.toString();\r\n    }\r\n\r\n    private BufferedImage generateQRCodeImage(String text) throws WriterException {\r\n        BitMatrix bitMatrix = new MultiFormatWriter().encode(\r\n                text,\r\n                BarcodeFormat.QR_CODE,\r\n                300,\r\n                300\r\n        );\r\n        return MatrixToImageWriter.toBufferedImage(bitMatrix);\r\n    }\r\n\r\n    public void goBack() {\r\n        // Close QR reader if it's open before going back\r\n        if (qrReader != null) {\r\n            qrReader.stopScanning();\r\n            qrReader.dispose();\r\n            qrReader = null;  // Set to null so a new instance will be created next time\r\n        }\r\n\r\n        view.showMessage(\"Returning to main menu...\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LMS_APP/src/main/java/com/example/LibraryManagementSystem/ManageBooksFunction.java b/LMS_APP/src/main/java/com/example/LibraryManagementSystem/ManageBooksFunction.java
--- a/LMS_APP/src/main/java/com/example/LibraryManagementSystem/ManageBooksFunction.java	(revision f8daf048be762591bc7930ddeecf9e02ad8a0796)
+++ b/LMS_APP/src/main/java/com/example/LibraryManagementSystem/ManageBooksFunction.java	(date 1746844797235)
@@ -183,6 +183,6 @@
             qrReader = null;  // Set to null so a new instance will be created next time
         }
 
-        view.showMessage("Returning to main menu...");
+        view.getFrame().dispose();
     }
 }
\ No newline at end of file
