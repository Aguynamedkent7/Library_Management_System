Index: src/main/java/com/example/LibraryManagementSystem/ManageBooksUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.LibraryManagementSystem;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\n\r\nimport com.toedter.calendar.JDateChooser;\r\nimport java.time.LocalDate;\r\nimport java.time.ZoneId;\r\nimport java.time.format.DateTimeParseException;\r\nimport java.util.Date;\r\n\r\n\r\npublic class ManageBooksUI {\r\n    private JFrame frame;\r\n    private JTable bookTable;\r\n    private JTextField titleField;\r\n    private JTextField authorField;\r\n    private JList<JCheckBox> genreList;\r\n    private JScrollPane genreScrollPane;\r\n    private JTextField publisherField;\r\n    private JLabel qrCodeLabel;\r\n    private ManageBooksFunction controller = new ManageBooksFunction(this);\r\n    private JDateChooser datePublishedChooser;\r\n    private JTextField availableCopiesField;\r\n\r\n    public ManageBooksUI() {\r\n        initializeUI();\r\n    }\r\n\r\n    private void initializeGenres() {\r\n        DefaultListModel<JCheckBox> model = new DefaultListModel<>();\r\n        JList<String> tempList = controller.queryGenresFromDB();\r\n        ListModel<String> tempModel = tempList.getModel();\r\n        \r\n        for (int i = 0; i < tempModel.getSize(); i++) {\r\n            model.addElement(new JCheckBox(tempModel.getElementAt(i)));\r\n        }\r\n        \r\n        genreList = new JList<>(model);\r\n        genreList.setCellRenderer(new CheckBoxListCellRenderer());\r\n        genreList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\r\n        \r\n        // Handle checkbox toggling\r\n        genreList.addMouseListener(new MouseAdapter() {\r\n            @Override\r\n            public void mouseClicked(MouseEvent event) {\r\n                int index = genreList.locationToIndex(event.getPoint());\r\n                if (index >= 0) {\r\n                    JCheckBox checkbox = genreList.getModel().getElementAt(index);\r\n                    checkbox.setSelected(!checkbox.isSelected());\r\n                    genreList.repaint();\r\n                }\r\n            }\r\n        });\r\n        \r\n        genreScrollPane = new JScrollPane(genreList);\r\n        genreScrollPane.setPreferredSize(new Dimension(150, 30));\r\n    }\r\n\r\n\r\n    private void initializeUI() {\r\n        frame = new JFrame(\"Library Management System\");\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setSize(1920, 1080);\r\n        frame.setLocationRelativeTo(null);\r\n\r\n        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));\r\n        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\r\n\r\n        // 1. Left Panel: Vertical Action Buttons (Add/Edit/Update/Delete)\r\n        JPanel leftPanel = new JPanel(new GridLayout(4, 1, 5, 5));\r\n        JButton addButton = new JButton(\"Add Book\");\r\n        JButton editButton = new JButton(\"Edit Book\");\r\n        editButton.addActionListener(e -> {\r\n            int selectedRow = bookTable.getSelectedRow();\r\n            if (selectedRow >= 0) {\r\n                Object[] bookData = getBookAtRow(selectedRow);\r\n                // bookData[0] contains book ID\r\n                titleField.setText(bookData[1].toString());\r\n                authorField.setText(bookData[2].toString());\r\n                setGenreSelection(bookData[3].toString()); // Critical for genre checkboxes\r\n                publisherField.setText(bookData[4].toString());\r\n                setDatePublished(bookData[5].toString());\r\n            } else {\r\n                showError(\"Please select a book to edit!\");\r\n            }\r\n        });\r\n        JButton updateButton = new JButton(\"Update Book\");\r\n        JButton deleteButton = new JButton(\"Delete Book\");\r\n        leftPanel.add(addButton);\r\n        leftPanel.add(editButton);\r\n        leftPanel.add(updateButton);\r\n        leftPanel.add(deleteButton);\r\n        leftPanel.setPreferredSize(new Dimension(150, 0));\r\n        mainPanel.add(leftPanel, BorderLayout.WEST);\r\n\r\n        // 2. Center Panel: Table + Input Fields (Stacked vertically)\r\n        JPanel centerPanel = new JPanel(new BorderLayout());\r\n\r\n\r\n        String[] columnNames = {\"ID\", \"Title\", \"Author\", \"Genre\", \"Publisher\", \"Date Published\", \"Available Copies\"};\r\n        DefaultTableModel model = new DefaultTableModel(columnNames, 0);\r\n        bookTable = new JTable(model);\r\n        bookTable.setDefaultEditor(Object.class, null);\r\n        bookTable.getTableHeader().setReorderingAllowed(false); // Prevent column reordering\r\n        bookTable.setDragEnabled(false); // Prevent row reordering\r\n        bookTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\r\n        // remove ID column from table\r\n        bookTable.getColumnModel().removeColumn(bookTable.getColumnModel().getColumn(0));\r\n        JScrollPane tableScrollPane = new JScrollPane(bookTable);\r\n        centerPanel.add(tableScrollPane, BorderLayout.CENTER);\r\n        controller.loadAvailableBooks();\r\n\r\n        // Input Fields (Under the table)\r\n        JPanel formPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 50, 10));\r\n\r\n        Font smallFont = new Font(\"Arial\", Font.PLAIN, 12);\r\n        Dimension fieldSize = new Dimension(150, 30);\r\n\r\n// Title\r\n        formPanel.add(new JLabel(\"Title:\"));\r\n        titleField = new JTextField();\r\n        titleField.setPreferredSize(fieldSize);\r\n        titleField.setFont(smallFont);\r\n        formPanel.add(titleField);\r\n\r\n// Author\r\n        formPanel.add(new JLabel(\"Author:\"));\r\n        authorField = new JTextField();\r\n        authorField.setPreferredSize(fieldSize);\r\n        authorField.setFont(smallFont);\r\n        formPanel.add(authorField);\r\n\r\n// Genre\r\n        initializeGenres(); // assumes genreScrollPane is created here\r\n        formPanel.add(new JLabel(\"Genre:\"));\r\n        formPanel.add(genreScrollPane);\r\n\r\n// Publisher\r\n        formPanel.add(new JLabel(\"Publisher:\"));\r\n        publisherField = new JTextField();\r\n        publisherField.setPreferredSize(fieldSize);\r\n        publisherField.setFont(smallFont);\r\n        formPanel.add(publisherField);\r\n\r\n// Date Published\r\n        formPanel.add(new JLabel(\"Date Published:\"));\r\n        datePublishedChooser = new JDateChooser();\r\n        datePublishedChooser.setPreferredSize(fieldSize);\r\n        datePublishedChooser.setFont(smallFont);\r\n        datePublishedChooser.setDateFormatString(\"yyyy-MM-dd\");\r\n        datePublishedChooser.getDateEditor().getUiComponent().setEnabled(false);\r\n        formPanel.add(datePublishedChooser);\r\n\r\n        // Add input fields below the table\r\n\r\n        mainPanel.add(centerPanel, BorderLayout.CENTER);\r\n\r\n        // 3. Bottom Panel: QR Code (Left) + Return/Back Buttons (Right)\r\n        JPanel bottomPanel = new JPanel(new BorderLayout());\r\n\r\n        // QR Code (Left)\r\n        qrCodeLabel = new JLabel();\r\n        qrCodeLabel.setPreferredSize(new Dimension(300, 300));\r\n        JPanel qrPanel = new JPanel(new BorderLayout());\r\n        qrPanel.setBorder(BorderFactory.createTitledBorder(\"Book QR Code\"));\r\n        qrPanel.add(qrCodeLabel, BorderLayout.CENTER);\r\n        bottomPanel.add(qrPanel, BorderLayout.WEST);\r\n\r\n        // Return/Back Buttons (Right)\r\n        JPanel returnBackPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 5));\r\n        JButton returnButton = new JButton(\"Return a Book\");\r\n        JButton backButton = new JButton(\"Back\");\r\n        returnBackPanel.add(returnButton);\r\n        returnBackPanel.add(backButton);\r\n        bottomPanel.add(formPanel, BorderLayout.CENTER, FlowLayout.CENTER);\r\n        bottomPanel.add(returnBackPanel, BorderLayout.SOUTH);\r\n\r\n\r\n        mainPanel.add(bottomPanel, BorderLayout.SOUTH);\r\n\r\n        // Add action listeners\r\n        addButton.addActionListener(e -> controller.addBook());\r\n\r\n        updateButton.addActionListener(e -> controller.updateBook());\r\n        deleteButton.addActionListener(e -> controller.deleteBook());\r\n        returnButton.addActionListener(e -> controller.returnBook());\r\n        backButton.addActionListener(e -> controller.goBack());\r\n\r\n        frame.add(mainPanel);\r\n    }\r\n\r\n    // Rest of the methods remain unchanged...\r\n    public void setController(ManageBooksFunction controller) {\r\n        this.controller = controller;\r\n    }\r\n\r\n    public void show() {\r\n        frame.setVisible(true);\r\n    }\r\n\r\n    public int getSelectedBookID(int selectedRow) {\r\n        // Convert view index to model index in case table is sorted\r\n        int modelRow = bookTable.convertRowIndexToModel(selectedRow);\r\n        // Assuming ID is stored in the first column (index 0)\r\n        Object idValue = bookTable.getModel().getValueAt(modelRow, 0);\r\n        return Integer.parseInt(idValue.toString());\r\n\r\n    }\r\n\r\n    public String getTitle() {\r\n        return titleField.getText();\r\n    }\r\n\r\n    public String getAuthor() {\r\n        return authorField.getText();\r\n    }\r\n\r\n    public String getGenre() {\r\n        ListModel<JCheckBox> model = genreList.getModel();\r\n        StringBuilder genres = new StringBuilder();\r\n        boolean first = true;\r\n        \r\n        for (int i = 0; i < model.getSize(); i++) {\r\n            JCheckBox checkbox = model.getElementAt(i);\r\n            if (checkbox.isSelected()) {\r\n                if (!first) {\r\n                    genres.append(\", \");\r\n                }\r\n                genres.append(checkbox.getText());\r\n                first = false;\r\n            }\r\n        }\r\n        return genres.toString();\r\n    }\r\n\r\n    public void setGenreSelection(String genres) {\r\n        ListModel<JCheckBox> model = genreList.getModel();\r\n        // Clear all selections first\r\n        for (int i = 0; i < model.getSize(); i++) {\r\n            model.getElementAt(i).setSelected(false);\r\n        }\r\n        \r\n        if (genres == null || genres.trim().isEmpty()) {\r\n            return;\r\n        }\r\n\r\n        String[] genreArray = genres.split(\",\");\r\n        for (String genre : genreArray) {\r\n            String trimmedGenre = genre.trim();\r\n            for (int i = 0; i < model.getSize(); i++) {\r\n                JCheckBox checkbox = model.getElementAt(i);\r\n                if (checkbox.getText().equals(trimmedGenre)) {\r\n                    checkbox.setSelected(true);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        genreList.repaint();\r\n    }\r\n\r\n\r\n    public String getPublisher() {\r\n        return publisherField.getText();\r\n    }\r\n\r\n    public String getDatePublished() {\r\n        if (datePublishedChooser.getDate() != null) {\r\n            LocalDate localDate = datePublishedChooser.getDate()\r\n                .toInstant()\r\n                .atZone(ZoneId.systemDefault())\r\n                .toLocalDate();\r\n            return localDate.toString(); // Returns in yyyy-MM-dd format\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    public void clearForm() {\r\n        titleField.setText(\"\");\r\n        authorField.setText(\"\");\r\n        ListModel<JCheckBox> model = genreList.getModel();\r\n        for (int i = 0; i < model.getSize(); i++) {\r\n            model.getElementAt(i).setSelected(false);\r\n        }\r\n        genreList.repaint();\r\n        publisherField.setText(\"\");\r\n        datePublishedChooser.setDate(null);\r\n    }\r\n\r\n    public void showError(String message) {\r\n        JOptionPane.showMessageDialog(frame, message, \"Error\", JOptionPane.ERROR_MESSAGE);\r\n    }\r\n\r\n    public void showMessage(String message) {\r\n        JOptionPane.showMessageDialog(frame, message, \"Message\", JOptionPane.INFORMATION_MESSAGE);\r\n    }\r\n\r\n    public void addBookToTable(Object[] bookData) {\r\n        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();\r\n        model.addRow(bookData);\r\n        selectFirstRow();\r\n    }\r\n\r\n    public int getSelectedBookRow() {\r\n        return bookTable.getSelectedRow();\r\n    }\r\n\r\n    public Object[] getBookAtRow(int row) {\r\n        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();\r\n        Object[] bookData = new Object[6];\r\n        for (int i = 0; i < 6; i++) {\r\n            bookData[i] = model.getValueAt(row, i);\r\n        }\r\n        return bookData;\r\n    }\r\n\r\n    public void updateBookInTable(int row, String[] bookData) {\r\n        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();\r\n        for (int i = 0; i < 5; i++) {\r\n            model.setValueAt(bookData[i], row, i);\r\n        }\r\n    }\r\n\r\n    public void removeBookFromTable(int row) {\r\n        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();\r\n        model.removeRow(row);\r\n    }\r\n\r\n    public void clearTable() {\r\n        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();\r\n        model.setRowCount(0);\r\n    }\r\n\r\n\r\n    public JFrame getFrame() {\r\n        return frame;\r\n    }\r\n\r\n    public JTable getBookTable() {\r\n        return bookTable;\r\n    }\r\n\r\n    public void selectFirstRow() {\r\n        bookTable.setRowSelectionInterval(0, 0);\r\n    }\r\n\r\n    public void displayQRCode(ImageIcon qrImage) {\r\n        qrCodeLabel.setIcon(qrImage);\r\n        frame.revalidate();\r\n        frame.repaint();\r\n    }\r\n\r\n    public void setDatePublished(String dateStr) {\r\n        if (dateStr != null && !dateStr.isEmpty()) {\r\n            try {\r\n                LocalDate localDate = LocalDate.parse(dateStr);\r\n                Date date = Date.from(localDate.atStartOfDay(ZoneId.systemDefault()).toInstant());\r\n                datePublishedChooser.setDate(date);\r\n            } catch (DateTimeParseException e) {\r\n                datePublishedChooser.setDate(null);\r\n            }\r\n        } else {\r\n            datePublishedChooser.setDate(null);\r\n        }\r\n    }\r\n\r\n    // Add this class at the end of ManageBooksUI\r\n    private static class CheckBoxListCellRenderer extends JCheckBox implements ListCellRenderer<JCheckBox> {\r\n        @Override\r\n        public Component getListCellRendererComponent(JList<? extends JCheckBox> list, JCheckBox value,\r\n                                                    int index, boolean isSelected, boolean cellHasFocus) {\r\n            setSelected(value.isSelected());\r\n            setText(value.getText());\r\n            setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());\r\n            setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());\r\n            return this;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/LibraryManagementSystem/ManageBooksUI.java b/src/main/java/com/example/LibraryManagementSystem/ManageBooksUI.java
--- a/src/main/java/com/example/LibraryManagementSystem/ManageBooksUI.java	(revision 1030587bd899839748b33f0cb1631aeefa2639fe)
+++ b/src/main/java/com/example/LibraryManagementSystem/ManageBooksUI.java	(date 1747189326815)
@@ -24,7 +24,6 @@
     private JLabel qrCodeLabel;
     private ManageBooksFunction controller = new ManageBooksFunction(this);
     private JDateChooser datePublishedChooser;
-    private JTextField availableCopiesField;
 
     public ManageBooksUI() {
         initializeUI();
Index: src/main/java/com/example/LibraryManagementSystem/LoginPage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.LibraryManagementSystem;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class LoginPage extends JFrame {\r\n    private static final int PANEL_WIDTH = 400;\r\n    private static final int PANEL_HEIGHT = 500;\r\n\r\n    public LoginPage() {\r\n        // Set up the frame for full screen with decorations\r\n        setExtendedState(JFrame.MAXIMIZED_BOTH); // Start maximized\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setTitle(\"Login System\");\r\n\r\n        // Create main panel with GridBagLayout to center our login panel\r\n        JPanel mainPanel = new JPanel(new GridBagLayout());\r\n        mainPanel.setBackground(new Color(0xaa, 0xaa, 0xaa)); // Light background color\r\n\r\n        // Create the fixed-size login panel\r\n        JPanel loginPanel = createLoginPanel();\r\n\r\n        // Add login panel to center of main panel\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 0;\r\n        mainPanel.add(loginPanel, gbc);\r\n\r\n        // Add main panel to frame\r\n        add(mainPanel);\r\n    }\r\n\r\n    private JPanel createLoginPanel() {\r\n        // Create the login panel with fixed size\r\n        JPanel loginPanel = new JPanel(new GridBagLayout());\r\n        loginPanel.setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));\r\n        loginPanel.setBorder(BorderFactory.createCompoundBorder(\r\n                BorderFactory.createLineBorder(new Color(150, 150, 150), 1),\r\n                BorderFactory.createEmptyBorder(0, 20, 20, 20)\r\n        ));\r\n        loginPanel.setBackground( new Color(0xDADADA));\r\n\r\n        GridBagConstraints gbc = new GridBagConstraints();\r\n        gbc.insets = new Insets(10, 5, 10, 5);\r\n        gbc.fill = GridBagConstraints.HORIZONTAL;\r\n        gbc.weightx = 1.0;\r\n\r\n        // Title label\r\n        JLabel titleLabel = new JLabel(\"Log-in\", SwingConstants.CENTER);\r\n        titleLabel.setFont(new Font(\"Arial\", Font.BOLD, 18));\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 0;\r\n        gbc.gridwidth = 2;\r\n        gbc.anchor = GridBagConstraints.PAGE_START;\r\n        gbc.insets = new Insets(0, 5, 10, 5);\r\n        loginPanel.add(titleLabel, gbc);\r\n\r\n        // Username\r\n        JLabel usernameLabel = new JLabel(\"Username:\");\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 1;\r\n        gbc.gridwidth = 1;\r\n        gbc.anchor = GridBagConstraints.LINE_END;\r\n        gbc.insets = new Insets(50, 5, 10, 5);\r\n        loginPanel.add(usernameLabel, gbc);\r\n\r\n        JTextField usernameField = new JTextField(15);\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 2;\r\n        gbc.anchor = GridBagConstraints.LINE_START;\r\n        gbc.insets = new Insets(10, 5, 10, 5);\r\n        usernameField.setPreferredSize(new Dimension(100, 30));\r\n        loginPanel.add(usernameField, gbc);\r\n\r\n        // Password\r\n        JLabel passwordLabel = new JLabel(\"Password:\");\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 3;\r\n        gbc.anchor = GridBagConstraints.ABOVE_BASELINE;\r\n        gbc.insets = new Insets(35, 5, 10, 5);\r\n        loginPanel.add(passwordLabel, gbc);\r\n\r\n        JPasswordField passwordField = new JPasswordField(15);\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 4;\r\n        gbc.anchor = GridBagConstraints.LINE_START;\r\n        gbc.insets = new Insets(10, 5, 10, 5);\r\n        passwordField.setPreferredSize(new Dimension(100, 30));\r\n        loginPanel.add(passwordField, gbc);\r\n\r\n        // Login button\r\n        JButton loginButton = new JButton(\"Login\");\r\n        loginButton.setPreferredSize(new Dimension(100, 25));\r\n        gbc.gridx = 0;\r\n        gbc.gridy = 5;\r\n        gbc.gridwidth = 2;\r\n        gbc.fill = GridBagConstraints.NONE;\r\n        gbc.anchor = GridBagConstraints.CENTER;\r\n        gbc.insets = new Insets(50, 5, 10, 5);\r\n        loginButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                String username = usernameField.getText();\r\n                String password = new String(passwordField.getPassword());\r\n                JOptionPane.showMessageDialog(LoginPage.this,\r\n                        \"Login attempted with:\\nUsername: \" + username);\r\n            }\r\n        });\r\n        loginPanel.add(loginButton, gbc);\r\n\r\n        return loginPanel;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                new LoginPage().setVisible(true);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/LibraryManagementSystem/LoginPage.java b/src/main/java/com/example/LibraryManagementSystem/LoginPage.java
--- a/src/main/java/com/example/LibraryManagementSystem/LoginPage.java	(revision 1030587bd899839748b33f0cb1631aeefa2639fe)
+++ b/src/main/java/com/example/LibraryManagementSystem/LoginPage.java	(date 1747198114510)
@@ -7,6 +7,7 @@
 public class LoginPage extends JFrame {
     private static final int PANEL_WIDTH = 400;
     private static final int PANEL_HEIGHT = 500;
+    private AuthFunction authFunctions = new AuthFunction(this);
 
     public LoginPage() {
         // Set up the frame for full screen with decorations
@@ -103,8 +104,7 @@
             public void actionPerformed(ActionEvent e) {
                 String username = usernameField.getText();
                 String password = new String(passwordField.getPassword());
-                JOptionPane.showMessageDialog(LoginPage.this,
-                        "Login attempted with:\nUsername: " + username);
+                authFunctions.loginFunction(username, password);
             }
         });
         loginPanel.add(loginButton, gbc);
Index: src/main/java/com/example/LibraryManagementSystem/AuthFunction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/LibraryManagementSystem/AuthFunction.java b/src/main/java/com/example/LibraryManagementSystem/AuthFunction.java
new file mode 100644
--- /dev/null	(date 1747198114517)
+++ b/src/main/java/com/example/LibraryManagementSystem/AuthFunction.java	(date 1747198114517)
@@ -0,0 +1,32 @@
+package com.example.LibraryManagementSystem;
+
+import javax.swing.*;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+
+public class AuthFunction {
+    private LoginPage loginPage;
+
+    public AuthFunction(LoginPage loginPage) {
+        this.loginPage = loginPage;
+    }
+
+    public void loginFunction(String username, String password) {
+        try {
+            String url = System.getenv("LMS_DB_URL");
+            Connection conn = DriverManager.getConnection(url);
+
+            int user_id = api.auth.login(conn, username, password);
+
+            if (user_id == -1) {
+                JOptionPane.showMessageDialog(loginPage, "Invalid username or password");
+            } else {
+                JOptionPane.showMessageDialog(loginPage, "Login successful!");;
+            }
+        } catch (SQLException e) {
+            System.out.println(e.getMessage());
+            JOptionPane.showMessageDialog(loginPage, "Error with login: !" + e.getMessage());;
+        }
+    }
+}
